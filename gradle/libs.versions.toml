# gradle/libs.versions.toml
[versions]
# Core SDK versions
compileSdk = "35"
minSdk = "33"
targetSdk = "35"
jvmTarget = "17"

# Plugin versions
agp = "8.1.0" # Sticking to stable AGP version.
kotlin = "1.9.22" # CRITICAL: Stable Kotlin version for compatibility.
ksp = "1.9.22-1.0.16" # Aligned KSP with stable Kotlin.
dokka = "1.9.20" # Stable Dokka version.
# Kotlin standard library versions
kotlinStdlib = "1.9.22"
kotlinStdlibJdk8 = "1.9.22"
kotlinReflect = "1.9.22"
kotlinxCoroutines = "1.10.2" # Added for kotlinx-coroutines libraries
kotlinxDatetime = "0.6.2" # Added for kotlinx-datetime
kotlinxSerializationJson = "1.8.1" # Added for kotlinx-serialization-json

# AndroidX
coreKtx = "1.16.0"
appcompat = "1.7.0"
lifecycle = "2.9.0"
activityCompose = "1.10.1"
navigation = "2.9.0"
work = "2.10.1"
constraintlayout = "2.2.1"
hiltNavigation = "1.2.0" # Added for androidx.hilt:hilt-navigation-compose
hiltWork = "1.2.0" # Added for androidx.hilt:hilt-work
hiltCompiler = "1.2.0" # Added for androidx.hilt:hilt-compiler

# Compose
composeBom = "2025.05.01" # Updated to a recent stable BOM.
composeCompiler = "1.5.12" # Aligned with Kotlin 1.9.22.

# Google Core / Play Services
material = "1.12.0" # The core Material Components library for Android
playServicesBase = "18.3.0"
googleGenerativeAi = "0.4.0" # Added for com.google.generativeai:generative-ai

# ML Kit
mlKitBarcodeScanning = "17.3.0" # Added for ML Kit
mlKitTextRecognition = "17.0.2" # Added for ML Kit

# Hilt
hilt = "2.56.2"

# Firebase
firebaseBom = "33.14.0"
firebaseCrashlytics = "2.9.9"
firebasePerformance = "1.4.2"
googleServices = "4.4.1"

# Google Cloud
googleCloudLibrariesBom = "26.61.0" # BOM for various google-cloud-java libraries

# Networking
okhttp = "4.12.0"
retrofit = "3.0.0" # Changed to a widely used stable version.

# Image Loading
coil = "2.7.0"
lottie = "6.6.6"

# Testing
junit = "4.13.2"
extJunit = "1.2.1"
espressoCore = "3.6.1"
mockk = "1.14.2" # Added for io.mockk:mockk

# CameraX
camerax = "1.4.2" # Added for CameraX libraries

# TensorFlow Lite
tfLite = "2.17.0"
tfLiteSupport = "0.5.0"
tfLiteMetadata = "0.5.0"
tfLiteGpu = "2.17.0"
tfLiteTaskVision = "0.4.4"
tfLiteTaskAudio = "0.4.4"
tfLiteTaskText = "0.4.4"

# gRPC and Protobuf
grpcBom = "1.73.0" # Using a commonly stable gRPC BOM version
protobufJava = "4.31.1" # Using a commonly stable Protobuf version
javaxAnnotation = "1.3.2" # Added for javax.annotation:javax.annotation-api

# AndroidX Media
androidxMedia = "1.7.0" # Added for androidx.media:media

# Accompanist
accompanistPermissions = "0.37.3"
accompanistSystemUiController = "0.36.0"
accompanistNavigationAnimation = "0.36.0"
accompanistPager = "0.36.0"
accompanistPagerIndicators = "0.36.0"

# Code Quality
spotless = "7.0.4"
detekt = "1.23.8"
ktlint = "12.3.0"
detektCompose = "1.6.0"

# Other utilities
timber = "5.0.1"

[plugins]
# Core plugins
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

# Code quality plugins
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }

# Google Services
google-services = { id = "com.google.gms.google-services", version.ref = "googleServices" }
firebase-crashlytics = { id = "com.google.firebase.crashlytics", version.ref = "firebaseCrashlytics" }
firebase-perf = { id = "com.google.firebase.firebase-perf", version.ref = "firebasePerformance" }

# Hilt
hilt-android = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }

# KSP
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }

# Navigation
navigation-safe-args = { id = "androidx.navigation.safeargs.kotlin", version.ref = "navigation" }

# Spotless for code formatting
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }

# Dokka plugin added
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }

[libraries]
# Kotlin Standard Library
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlinStdlib" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlinStdlibJdk8" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlinReflect" }

# AndroidX Core
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
androidx-material = { module = "com.google.android.material:material", version.ref = "material" } # Core Material Components library
androidx-constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintlayout" }

# Lifecycle
androidx-lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
androidx-lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
androidx-lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
androidx-lifecycle-runtime-compose = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }

# Compose
androidx-compose-bom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { module = "androidx.compose.ui:ui" }
androidx-compose-ui-graphics = { module = "androidx.compose.ui:ui-graphics" }
androidx-compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview" }
androidx-compose-material3 = { module = "androidx.compose.material3:material3" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }

# WorkManager
androidx-work-runtime-ktx = { module = "androidx.work:work-runtime-ktx", version.ref = "work" }
androidx-hilt-work = { module = "androidx.hilt:hilt-work", version.ref = "hiltWork" }
androidx-hilt-compiler = { module = "androidx.hilt:hilt-compiler", version.ref = "hiltCompiler" }

# Navigation
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "navigation" }
androidx-navigation-fragment-ktx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigation" }
androidx-navigation-ui-ktx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigation" }
androidx-hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hiltNavigation" }

# Hilt
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
hilt-android-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hilt" }

# Firebase
firebase-bom = { module = "com.google.firebase:firebase-bom", version.ref = "firebaseBom" }
firebase-analytics-ktx = { module = "com.google.firebase:firebase-analytics-ktx" }
firebase-crashlytics-ktx = { module = "com.google.firebase:firebase-crashlytics-ktx" }
firebase-perf-ktx = { module = "com.google.firebase:firebase-perf-ktx" }
firebase-messaging-ktx = { module = "com.google.firebase:firebase-messaging-ktx" }
firebase-firestore-ktx = { module = "com.google.firebase:firebase-firestore-ktx" }
firebase-storage-ktx = { module = "com.google.firebase:firebase-storage-ktx" }
firebase-auth-ktx = { module = "com.google.firebase:firebase-auth-ktx" }
firebase-config-ktx = { module = "com.google.firebase:firebase-config-ktx" }
firebase-dynamic-links-ktx = { module = "com.google.firebase:firebase-dynamic-links-ktx" }

# Google Generative AI
google-generative-ai = { module = "com.google.generativeai:generative-ai", version.ref = "googleGenerativeAi" }

# Google Cloud libraries (used by Vertex AI parts)
google-cloud-libraries-bom = { module = "com.google.cloud:libraries-bom", version.ref = "googleCloudLibrariesBom" }
# Explicit declaration of common Google Cloud libraries for Vertex AI as they were hardcoded before
google-cloud-vertexai = { module = "com.google.cloud:google-cloud-vertexai" }
google-cloud-aiplatform = { module = "com.google.cloud:google-cloud-aiplatform" }
google-cloud-storage = { module = "com.google.cloud:google-cloud-storage" }
google-auth-library-oauth2-http = { module = "com.google.auth:google-auth-library-oauth2-http" }
google-api-client = { module = "com.google.api-client:google-api-client" }
google-apis-google-api-services-aiplatform = { module = "com.google.apis:google-api-services-aiplatform" }

# Coroutines
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinxCoroutines" }
kotlinx-coroutines-play-services = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-play-services", version.ref = "kotlinxCoroutines" }

# Accompanist
accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanistPermissions" }
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanistSystemUiController" }
accompanist-navigation-animation = { module = "com.google.accompanist:accompanist-navigation-animation", version.ref = "accompanistNavigationAnimation" }
accompanist-pager = { module = "com.google.accompanist:accompanist-pager", version.ref = "accompanistPager" }
accompanist-pager-indicators = { module = "com.google.accompanist:accompanist-pager-indicators", version.ref = "accompanistPagerIndicators" }

# Code quality
detekt-plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
detekt-compose = { module = "com.mikepenz.detekt:detekt-compose", version.ref = "detektCompose" }
ktlint-plugin = { module = "org.jlleitschuh.gradle:ktlint-gradle", version.ref = "ktlint" }

# Other utilities
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationJson" }

# Google Play Services - ML Kit
mlkit-barcode-scanning = { module = "com.google.mlkit:barcode-scanning", version.ref = "mlKitBarcodeScanning" }
mlkit-text-recognition = { module = "com.google.mlkit:text-recognition", version.ref = "mlKitTextRecognition" }

# CameraX
androidx-camera-core = { module = "androidx.camera:camera-core", version.ref = "camerax" }
androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "camerax" }
androidx-camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "camerax" }
androidx-camera-view = { module = "androidx.camera:camera-view", version.ref = "camerax" }

# TensorFlow Lite
tensorflow-lite = { module = "org.tensorflow:tensorflow-lite", version.ref = "tfLite" }
tensorflow-lite-support = { module = "org.tensorflow:tensorflow-lite-support", version.ref = "tfLiteSupport" }
tensorflow-lite-metadata = { module = "org.tensorflow:tensorflow-lite-metadata", version.ref = "tfLiteMetadata" }
tensorflow-lite-gpu = { module = "org.tensorflow:tensorflow-lite-gpu", version.ref = "tfLiteGpu" }
tensorflow-lite-task-vision = { module = "org.tensorflow:tensorflow-lite-task-vision", version.ref = "tfLiteTaskVision" }
tensorflow-lite-task-audio = { module = "org.tensorflow:tensorflow-lite-task-audio", version.ref = "tfLiteTaskAudio" }
tensorflow-lite-task-text = { module = "org.tensorflow:tensorflow-lite-task-text", version.ref = "tfLiteTaskText" }

# gRPC and Protobuf
grpc-bom = { module = "io.grpc:grpc-bom", version.ref = "grpcBom" }
grpc-okhttp = { module = "io.grpc:grpc-okhttp" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf" }
grpc-stub = { module = "io.grpc:grpc-stub" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobufJava" }
protobuf-kotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobufJava" } # Align with protobufJava
javax-annotation-api = { module = "javax.annotation:javax.annotation-api", version.ref = "javaxAnnotation" }

# AndroidX Media
androidx-media = { module = "androidx.media:media", version.ref = "androidxMedia" }

# Networking (using TOML aliases)
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-logging-interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-converter-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }

# Image Loading & Lottie (using TOML aliases)
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
lottie-compose = { module = "com.airbnb.android:lottie-compose", version.ref = "lottie" }

# Testing (using TOML aliases and BOM)
junit = { module = "junit:junit", version.ref = "junit" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinxCoroutines" } # Align with kotlinxCoroutines
androidx-test-ext-junit = { module = "androidx.test.ext:junit", version.ref = "extJunit" }
espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCore" }
androidx-compose-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4" }
androidx-compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }
androidx-compose-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest" }